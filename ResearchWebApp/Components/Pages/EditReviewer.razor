@page "/edit-reviewer/{fileName}/{id:int}"
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Syncfusion.Blazor
@using Syncfusion.Blazor.RichTextEditor

<h3>
    Edit Reviewer Document
    <button class="btn btn-secondary btn-sm ml-3" @onclick="SaveFile">Save</button>
</h3>

<SfRichTextEditor @ref="richTextEditor" Value="@editorContent">
    <RichTextEditorToolbarSettings Items="@Tools" />
    <RichTextEditorQuickToolbarSettings Image="@Image" Link="@Link" />
</SfRichTextEditor>



<br />

@code {
    [Parameter]
    public string fileName { get; set; }

    [Parameter]
    public int id { get; set; }

    private SfRichTextEditor richTextEditor;
    private string editorContent;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    private List<ImageToolbarItemModel> Image = new List<ImageToolbarItemModel>()
    {
        new ImageToolbarItemModel() { Command = ImageToolbarCommand.Replace },
        new ImageToolbarItemModel() { Command = ImageToolbarCommand.Align },
        new ImageToolbarItemModel() { Command = ImageToolbarCommand.Remove }
    };

    private List<LinkToolbarItemModel> Link = new List<LinkToolbarItemModel>()
    {
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.UnLink }
    };

    protected override void OnInitialized()
    {
        LoadFileContent();
    }

    private void LoadFileContent()
    {
        // Load the content of the file into the editorContent variable
        string reviewerDir = Path.Combine("Reviewer");
        var filePath = Path.Combine(reviewerDir, fileName);
        if (File.Exists(filePath))
        {
            if (filePath.EndsWith(".docx"))
            {
                using (var stream = File.OpenRead(filePath))
                using (var wordDoc = WordprocessingDocument.Open(stream, false))
                {
                    var body = wordDoc.MainDocumentPart.Document.Body;
                    editorContent = body?.InnerText ?? string.Empty;
                }
            }
            else if (filePath.EndsWith(".html"))
            {
                editorContent = File.ReadAllText(filePath);
            }
        }
    }

    private async Task SaveFile()
    {
        // Retrieve the current value from the editor
        editorContent = richTextEditor.Value; // Use the Value property directly

        // Save the edited content back to the file
        string reviewerDir = Path.Combine("Reviewer");
        var filePath = Path.Combine(reviewerDir, fileName);
        if (File.Exists(filePath))
        {
            File.WriteAllText(filePath, editorContent); // Write the updated content to the file
            await Task.CompletedTask; // Simulating async operation

            // After saving, navigate back to the subject file list page
            Navigation.NavigateTo($"/subject-files/{id}");
        }
    }
}
