@page "/calendar"
@using Syncfusion.Blazor.Schedule
@inject NavigationManager UriHelper
@inject IStudySessionService StudySessionService
@inject ISubjectService SubjectService
@inject IExamScheduleService ExamScheduleService
@inject ILogger<Calendar> Logger
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="col-lg-12 control-section">
    <SfSchedule TValue="ScheduleEvent" Height="600px" @bind-SelectedDate="@CurrentDate" @bind-CurrentView="@CurrentView">
        <ScheduleEventSettings DataSource="@FilteredEvents"></ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="Syncfusion.Blazor.Schedule.View.Month" DisplayName="Month"></ScheduleView>
            <ScheduleView Option="Syncfusion.Blazor.Schedule.View.TimelineDay" DisplayName="Day"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>

@code {
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    private Syncfusion.Blazor.Schedule.View CurrentView { get; set; } = Syncfusion.Blazor.Schedule.View.TimelineDay; // Specify the namespace
    private List<ScheduleEvent> AllEvents { get; set; } = new List<ScheduleEvent>();
    private List<ScheduleEvent> FilteredEvents { get; set; } = new List<ScheduleEvent>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        FilterEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var studySessions = await StudySessionService.GetAllStudySessionsAsync();
            var examSchedules = await ExamScheduleService.GetAllExamSchedulesAsync();
            var subjects = await SubjectService.GetAllSubjectsAsync();

            // Log fetched data
            Logger.LogInformation($"Fetched {studySessions.Count} study sessions, {examSchedules.Count} exam schedules, and {subjects.Count} subjects.");

            // Add Study Sessions to AllEvents
            AllEvents.AddRange(studySessions.Select(ss => new ScheduleEvent
                {
                    Id = ss.Id,
                    Subject = ss.Subject.SubjectName ?? "Unknown Subject",
                    StartTime = ss.StartTime != null ? CombineDateAndTime(ss.SessionDate, ss.StartTime) : DateTime.MinValue,
                    EndTime = ss.EndTime != null ? CombineDateAndTime(ss.SessionDate, ss.EndTime) : DateTime.MinValue,
                    CategoryColor = "#0000FF" // Blue color for study sessions
                }));

            // Add Exam Schedules to AllEvents
            AllEvents.AddRange(examSchedules.Select(es => new ScheduleEvent
                {
                    Id = es.Id,
                    Subject = es.Subject?.SubjectName ?? "Unknown Subject",
                    StartTime = es.StartTime != null ? CombineDateAndTime(es.ExamDate, es.StartTime) : DateTime.MinValue,
                    EndTime = es.EndTime != null ? CombineDateAndTime(es.ExamDate, es.EndTime) : DateTime.MinValue,
                    CategoryColor = "#FF0000" // Red color for exam schedules
                }));

            // Add Subject Schedules to AllEvents
            foreach (var subject in subjects)
            {
                foreach (var schedule in subject.Schedules)
                {
                    DateTime nextScheduleDate = Next(DateTime.Today, schedule.Day);
                    for (int i = 0; i < 52; i++) // Add events for one year
                    {
                        AllEvents.Add(new ScheduleEvent
                            {
                                Id = schedule.Id,
                                Subject = subject.SubjectName ?? "Unknown Subject",
                                StartTime = schedule.StartTime != null ? CombineDateAndTime(nextScheduleDate, schedule.StartTime) : DateTime.MinValue,
                                EndTime = schedule.EndTime != null ? CombineDateAndTime(nextScheduleDate, schedule.EndTime) : DateTime.MinValue,
                                RecurrenceRule = $"FREQ=WEEKLY;BYDAY={schedule.Day.ToString().Substring(0, 2).ToUpper()}",
                                CategoryColor = "#808080" // Gray color for subject schedules
                            });
                        nextScheduleDate = nextScheduleDate.AddDays(7);
                    }
                }
            }

            // Log added events
            Logger.LogInformation($"Added {AllEvents.Count} events.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading calendar data.");
        }
    }

    private void FilterEvents()
    {
        if (CurrentView == Syncfusion.Blazor.Schedule.View.TimelineDay)
        {
            FilteredEvents = AllEvents.Where(e => e.CategoryColor == "#0000FF").ToList(); // Only study sessions
        }
        else if (CurrentView == Syncfusion.Blazor.Schedule.View.Month)
        {
            FilteredEvents = AllEvents.Where(e => e.CategoryColor == "#808080" || e.CategoryColor == "#FF0000").ToList(); // Only subject schedules and exam schedules
        }

        // Log filtered events
        Logger.LogInformation($"Filtered {FilteredEvents.Count} events for {CurrentView} view.");
    }

    private static DateTime Next(DateTime date, DayOfWeek targetDay)
    {
        int daysToAdd = ((int)targetDay - (int)date.DayOfWeek + 7) % 7;
        return date.AddDays(daysToAdd);
    }

    private DateTime CombineDateAndTime(DateTime date, string time)
    {
        string[] formats = { "hh:mm tt", "h:mm tt", "HH:mm", "H:mm", "HH:mm:ss", "H:mm:ss" };
        foreach (var format in formats)
        {
            if (DateTime.TryParseExact(time, format, null, System.Globalization.DateTimeStyles.None, out DateTime parsedTime))
            {
                return date.Add(parsedTime.TimeOfDay);
            }
        }
        Logger.LogError($"Invalid time format: {time}");
        throw new FormatException($"Invalid time format: {time}");
    }

    public class ScheduleEvent
    {
        public int Id { get; set; }
        public string Subject { get; set; } = "Unknown Subject";
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string CategoryColor { get; set; } = "#808080";
        public string RecurrenceRule { get; set; } = "";
    }
}
