@page "/reviewer-list"
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject NavigationManager Navigation

<h3>Reviewer Documents</h3>

@if (reviewerFiles?.Any() == true)
{
    <div class="row">
        @foreach (var file in reviewerFiles)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@Path.GetFileNameWithoutExtension(file)</h5>
                        <p class="text-muted">@filePreviews[file]</p>
                        <button class="btn btn-primary" @onclick="() => ViewFile(file)">View</button>
                        <button class="btn btn-secondary" @onclick="() => EditFile(file)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteFile(file)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No reviewer files found.</p>
}

@code {
    private List<string> reviewerFiles = new List<string>();
    private Dictionary<string, string> filePreviews = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        LoadFiles();
    }

    private void LoadFiles()
    {
        // Load the files in the Reviewer directory
        string reviewerDir = Path.Combine("Reviewer");
        if (Directory.Exists(reviewerDir))
        {
            // Get all .docx and .html files
            var docxFiles = Directory.GetFiles(reviewerDir, "*.docx").ToList();
            var htmlFiles = Directory.GetFiles(reviewerDir, "*.html").ToList();

            reviewerFiles = docxFiles.Concat(htmlFiles).ToList();

            // Generate previews for each file
            filePreviews.Clear();
            foreach (var file in reviewerFiles)
            {
                filePreviews[file] = GetFilePreview(file);
            }
        }
    }

    void ViewFile(string filePath)
    {
        var fileName = Path.GetFileName(filePath);
        Navigation.NavigateTo($"/view-reviewer/{fileName}");
    }

    void EditFile(string filePath)
    {
        var fileName = Path.GetFileName(filePath);
        Navigation.NavigateTo($"/edit-reviewer/{fileName}");
    }

    // Delete the selected file
    void DeleteFile(string filePath)
    {
        if (File.Exists(filePath))
        {
            try
            {
                File.Delete(filePath);  // Delete the file from the system
                reviewerFiles.Remove(filePath);  // Remove from the list
                filePreviews.Remove(filePath);  // Remove from preview dictionary
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting file: {ex.Message}");
            }
        }
    }

    // Generate a preview by reading the first 100 characters or lines of the file
    private string GetFilePreview(string filePath)
    {
        try
        {
            if (File.Exists(filePath))
            {
                if (filePath.EndsWith(".docx"))
                {
                    using (var stream = File.OpenRead(filePath))
                    using (var wordDoc = WordprocessingDocument.Open(stream, false))
                    {
                        var body = wordDoc.MainDocumentPart.Document.Body;
                        if (body != null)
                        {
                            string fullText = body.InnerText;
                            return string.IsNullOrEmpty(fullText) ? "No content available." : fullText.Substring(0, Math.Min(fullText.Length, 100)) + "...";
                        }
                    }
                }
                else if (filePath.EndsWith(".html"))
                {
                    string fullText = File.ReadAllText(filePath);
                    // Optionally, extract only visible text or a preview if needed
                    return string.IsNullOrEmpty(fullText) ? "No content available." : fullText.Substring(0, Math.Min(fullText.Length, 100)) + "...";
                }
            }
        }
        catch (Exception ex)
        {
            return $"Error reading file: {ex.Message}";
        }

        return "No content available.";
    }
}
